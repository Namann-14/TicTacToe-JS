// making a variable named box to store the array of nodes in which all the buttons are kept
let boxes = document.querySelectorAll(".btn");

// making a turn variable so that the next move can be alternate
let turnO = true;

// making a variable to show whoes winner
let winMsg = document.querySelector("#winningMsg");

// count if the game is draw
let count = 0;

let resetBtn = document.querySelector(".reset");

let player1;
let player2;
let countPlayer1 = 0;
let countPlayer2 = 0;


const resetGame = () => {
    turnO = true;
    count = 0;
    enableBoxes();
    winMsg.style.display = "none";  
  };

// iterating over all the nodes in the array 
boxes.forEach((btn)=>{

    // adding a event listen to the button element , which on clicked does the given code 
    btn.addEventListener('click', ()=>{
        if (turnO){
            // we target the btn because if we target the box we would have gotten a array.
            btn.innerText = "O";
            btn.style.color = "#28a745"
            turnO = false;
        }else{
            btn.innerText = "X";
            btn.style.color = "#dc3545"
            turnO = true;
        }
        btn.disabled = true;
        count++;
        checkWinner();
        if (count == 9 && !checkWinner()){
            displayDraw();
        }
    }
)});

// making this a const becuse it is fixed.
const winCondition = [
    [0,1,2],
    [0,3,6],
    [0,4,8],
    [1,4,7],
    [2,4,6],
    [2,5,8],
    [3,4,5],
    [6,7,8]
];

// making a arrow function so that each 
const checkWinner = () =>{
    for (let pattern of winCondition){
        // postion one will be array of boxes [],, first element is pattern, 
        let postion1 = boxes[pattern[0]].innerText; 
        let postion2 = boxes[pattern[1]].innerText;
        let postion3 = boxes[pattern[2]].innerText;
        // checking condition 
        if (postion1 !== "" && postion2 !== "" && postion3 !== ""){
            if (postion1 == postion2 && postion2 == postion3){
                displayWinner(postion1);
                disableBoxes();
                updateScore(postion1);
                return true;
            }
        }
    }
}
// to show the winner 
const displayWinner = (postion1) => {
    winMsg.firstElementChild.innerText = `The winner is ${postion1}`;
    winMsg.style.display = "block";
}

const displayDraw = () => {
winMsg.firstElementChild.innerText = `The Game is draw !`;
winMsg.lastElementChild.innerText = `Both gets one point !`;
winMsg.style.display = "block";

countPlayer1++;
countPlayer2++;
document.querySelector('#player1Score').innerText = countPlayer1;
document.querySelector('#player2Score').innerText = countPlayer2;
}

const disableBoxes = () =>{
// for each button in the array of boxes
    for (btn of boxes){
        btn.disabled = true;
    }
}

const enableBoxes = () =>{
// for each button in the array of boxes
    for (btn of boxes){
        btn.disabled = false;
        btn.innerText = " ";
        btn.style.color = "black";
    }
}

// modals
let addPlayerbtn = document.querySelector('#playerSubmit');

const submitFunction = (event)=>{
    document.querySelector('.scoreContainer').style.display = 'block';
    event.preventDefault();
    player1 = document.querySelector("#player1").value;
    player2 = document.querySelector("#player2").value;
    document.querySelector('#player1Table').innerText = player1;
    document.querySelector('#player2Table').innerText = player2;
    var modal = bootstrap.Modal.getInstance(document.getElementById('exampleModal'));
    modal.hide();
}

const updateScore = (postion1)=>{
    if (postion1 == "O"){
        countPlayer1++;
    }else if (postion1 == "X"){
        countPlayer2++;
    }
    document.querySelector('#player1Score').innerText = countPlayer1;
    document.querySelector('#player2Score').innerText = countPlayer2;
}


// event listeners should be at last
addPlayerbtn.addEventListener('click', submitFunction);
resetBtn.addEventListener("click", resetGame);


